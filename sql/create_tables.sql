DROP TABLE IF EXISTS song CASCADE;
DROP TABLE IF EXISTS person CASCADE;
DROP TABLE IF EXISTS band CASCADE;
DROP TABLE IF EXISTS has_members CASCADE;
DROP TABLE IF EXISTS artist CASCADE;
DROP TABLE IF EXISTS genre CASCADE;
DROP TABLE IF EXISTS record CASCADE;
DROP TABLE IF EXISTS similar_to CASCADE;
DROP TABLE IF EXISTS record_songs CASCADE;
DROP TABLE IF EXISTS song_genre CASCADE;
DROP TABLE IF EXISTS record_artist CASCADE;
DROP TABLE IF EXISTS song_tags CASCADE;
DROP TABLE IF EXISTS song_by CASCADE;
DROP TABLE IF EXISTS song_feature CASCADE;
DROP TABLE IF EXISTS user_account CASCADE;
DROP TABLE IF EXISTS playlist CASCADE;
DROP TABLE IF EXISTS playlist_songs CASCADE;

CREATE TABLE song (
	SID VARCHAR,
	length INTEGER,
    song_name VARCHAR,
    release_year INTEGER,
    lyrics VARCHAR,
    youtube_link VARCHAR,
    spotify_link VARCHAR,
    apple_link VARCHAR,
    PRIMARY KEY (SID)
);

CREATE TABLE artist (
    AID VARCHAR,
	artist_name VARCHAR,
    artist_picture_link VARCHAR,
    PRIMARY KEY (AID)
);

CREATE TABLE person (
	PID SERIAL,
	person_name VARCHAR,
	gender VARCHAR(1),
	birth_date DATE,
	country VARCHAR,
	AID VARCHAR,
	PRIMARY KEY (PID),
	FOREIGN KEY (AID) REFERENCES artist(AID)
);

CREATE TABLE band (
    BID SERIAL,
	formation_year INTEGER,
	AID VARCHAR,
	PRIMARY KEY (BID),
	FOREIGN KEY (AID) REFERENCES artist(AID)
);

CREATE TABLE has_members (
	PID INTEGER,
	BID INTEGER,
	PRIMARY KEY (PID, BID),
	FOREIGN KEY (PID) REFERENCES person(PID),
	FOREIGN KEY (BID) REFERENCES band(BID)
);

CREATE TABLE genre (
	genre_name VARCHAR,
	PRIMARY KEY (genre_name)
);

CREATE TABLE record (
	RID INTEGER,
	record_name VARCHAR,
	release_year INTEGER,
	record_cover_link VARCHAR,
	is_single BOOLEAN,
	PRIMARY KEY (RID)
);

CREATE TABLE similar_to (
	SID_1 VARCHAR,
	SID_2 VARCHAR,
	similarity_score INTEGER,
	PRIMARY KEY (SID_1, SID_2),
	FOREIGN KEY (SID_1) REFERENCES song(SID),
	FOREIGN KEY (SID_2) REFERENCES song(SID)
);

CREATE TABLE record_songs (
	SID VARCHAR,
	RID INTEGER,
	PRIMARY KEY (SID, RID),
	FOREIGN KEY (SID) REFERENCES song(SID),
	FOREIGN KEY (RID) REFERENCES record(RID)
);

CREATE TABLE song_genre (
	SID VARCHAR,
	genre_name VARCHAR,
	PRIMARY KEY (SID, genre_name),
	FOREIGN KEY (SID) REFERENCES song(SID),
	FOREIGN KEY (genre_name) REFERENCES genre(genre_name)
);

CREATE TABLE record_artist (
	RID INTEGER,
	AID VARCHAR,
	PRIMARY KEY (RID, AID),
	FOREIGN KEY (RID) REFERENCES record(RID),
	FOREIGN KEY (AID) REFERENCES artist(AID)
);

CREATE TABLE song_tags (
	SID VARCHAR,
	tag_name VARCHAR,
	PRIMARY KEY (SID, tag_name),
	FOREIGN KEY (SID) REFERENCES song(SID)
);

CREATE TABLE song_by (
	SID VARCHAR,
	AID VARCHAR,
	PRIMARY KEY (SID, AID),
	FOREIGN KEY (SID) REFERENCES song(SID),
	FOREIGN KEY (AID) REFERENCES artist(AID)
);

CREATE TABLE song_feature (
	SID VARCHAR,
	AID VARCHAR,
	PRIMARY KEY (SID, AID),
	FOREIGN KEY (SID) REFERENCES song(SID),
	FOREIGN KEY (AID) REFERENCES artist(AID)
);

/* ADDED AFTER PHASE 1 */
CREATE TABLE user_account (
    UID SERIAL,
    pwd_hash VARCHAR,
    salt VARCHAR,
    PRIMARY KEY (UID)
);

CREATE TABLE playlist (
    PLID SERIAL,
    playlist_name VARCHAR,
    owner INTEGER,
    PRIMARY KEY (PLID),
    FOREIGN KEY (owner) REFERENCES user_account(UID)
);

CREATE TABLE playlist_songs (
    PLID INTEGER,
    SID VARCHAR,
    PRIMARY KEY (PLID, SID),
    FOREIGN KEY (PLID) REFERENCES playlist(PLID),
    FOREIGN KEY (SID) REFERENCES song(SID)
);

CREATE TABLE mb_artist (
    mb_artist_id VARCHAR,
    artist_name VARCHAR,
    sort_name VARCHAR,

)